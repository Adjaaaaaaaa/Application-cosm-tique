#!/usr/bin/env python
"""
Script de configuration du RAG pour BeautyScan.

Ce script :
1. Cr√©e l'index Azure Cognitive Search
2. Ajoute des donn√©es de test pour les routines et ingr√©dients
3. Teste le RAG
"""

import os
import sys
import django
from pathlib import Path

# Ajouter le chemin du projet au PYTHONPATH
project_root = Path(__file__).resolve().parent.parent.parent
sys.path.insert(0, str(project_root))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.dev')
django.setup()

from backend.services.rag_service import RAGService

def create_sample_data():
    """Cr√©er des donn√©es d'exemple pour le RAG."""
    return [
        # Donn√©es pour les routines
        {
            "id": "routine_dry_skin_morning",
            "title": "Routine Matin Peau S√®che",
            "content": "Nettoyant doux + S√©rum acide hyaluronique + Cr√®me hydratante + SPF 50+",
            "ingredients": "acide hyaluronique, c√©ramides, ur√©e, spf",
            "category": "routine",
            "brand": "La Roche-Posay, Av√®ne, Eucerin",
            "safety_score": 95,
            "benefits": "Hydratation 24h, protection solaire, r√©paration barri√®re cutan√©e",
            "warnings": "√âviter les produits avec alcool d√©natur√©",
            "skin_types": "s√®che, sensible",
            "tags": "matin, hydratation, protection solaire",
            "price_range": "medium"
        },
        {
            "id": "routine_oily_skin_evening",
            "title": "Routine Soir Peau Grasse",
            "content": "D√©maquillant + Nettoyant purifiant + S√©rum niacinamide + Cr√®me l√©g√®re",
            "ingredients": "niacinamide, acide salicylique, zinc, r√©tinol",
            "category": "routine",
            "brand": "The Ordinary, CeraVe, La Roche-Posay",
            "safety_score": 90,
            "benefits": "Contr√¥le du s√©bum, r√©duction des pores, pr√©vention de l'acn√©",
            "warnings": "R√©tinol seulement 2-3x par semaine",
            "skin_types": "grasse, mixte",
            "tags": "soir, purifiant, anti-acn√©",
            "price_range": "low"
        },
        {
            "id": "ingredient_hyaluronic_acid",
            "title": "Acide Hyaluronique",
            "content": "L'acide hyaluronique est un humectant puissant qui peut retenir jusqu'√† 1000 fois son poids en eau. Il hydrate la peau en profondeur et r√©duit l'apparence des rides.",
            "ingredients": "acide hyaluronique, sodium hyaluronate",
            "category": "ingredient",
            "brand": "The Ordinary, La Roche-Posay, Vichy",
            "safety_score": 98,
            "benefits": "Hydratation intense, r√©duction des rides, compatibilit√© tous types de peau",
            "warnings": "Peut causer des picotements si concentration > 2%",
            "skin_types": "tous types",
            "tags": "hydratant, anti-√¢ge, humectant",
            "price_range": "medium"
        },
        {
            "id": "ingredient_niacinamide",
            "title": "Niacinamide",
            "content": "La niacinamide (vitamine B3) r√©duit la production de s√©bum, minimise les pores et am√©liore la texture de la peau. Efficace contre l'acn√© et les taches.",
            "ingredients": "niacinamide, vitamine B3",
            "category": "ingredient",
            "brand": "The Ordinary, CeraVe, Paula's Choice",
            "safety_score": 95,
            "benefits": "Contr√¥le du s√©bum, r√©duction des pores, √©claircissement des taches",
            "warnings": "Peut causer des rougeurs au d√©but",
            "skin_types": "grasse, mixte, acn√©ique",
            "tags": "purifiant, anti-acn√©, √©claircissant",
            "price_range": "low"
        },
        {
            "id": "product_toleriane_ultra",
            "title": "La Roche-Posay Toleriane Ultra",
            "content": "Cr√®me hydratante pour peaux sensibles avec c√©ramides et acide hyaluronique. Test√©e sur peaux sensibles et intol√©rantes.",
            "ingredients": "c√©ramides, acide hyaluronique, niacinamide",
            "category": "product",
            "brand": "La Roche-Posay",
            "safety_score": 96,
            "benefits": "Hydratation 24h, apaisement, r√©paration barri√®re",
            "warnings": "Testez d'abord sur une petite zone",
            "skin_types": "sensible, s√®che, normale",
            "tags": "hydratant, apaisant, r√©parateur",
            "price_range": "medium"
        }
    ]

def main():
    """Fonction principale."""
    print("üöÄ Configuration du RAG pour BeautyScan")
    print("=" * 50)
    
    try:
        # Initialiser le service RAG
        print("1. Initialisation du service RAG...")
        rag_service = RAGService()
        
        if not rag_service.is_available():
            print("‚ùå RAG Service non disponible - v√©rifiez votre configuration Azure Search")
            print("   Assurez-vous d'avoir configur√© :")
            print("   - AZURE_SEARCH_ENDPOINT")
            print("   - AZURE_SEARCH_KEY") 
            print("   - AZURE_SEARCH_INDEX_NAME")
            return False
        
        print("‚úÖ RAG Service initialis√© avec succ√®s")
        
        # Cr√©er l'index
        print("\n2. Cr√©ation de l'index...")
        if rag_service.create_index():
            print("‚úÖ Index cr√©√© avec succ√®s")
        else:
            print("‚ö†Ô∏è  Index d√©j√† existant ou erreur de cr√©ation")
        
        # Ajouter des donn√©es d'exemple
        print("\n3. Ajout des donn√©es d'exemple...")
        sample_data = create_sample_data()
        
        if rag_service.add_documents(sample_data):
            print(f"‚úÖ {len(sample_data)} documents ajout√©s avec succ√®s")
        else:
            print("‚ùå Erreur lors de l'ajout des documents")
            return False
        
        # Tester le RAG
        print("\n4. Test du RAG...")
        test_queries = [
            "routine peau s√®che matin",
            "acide hyaluronique",
            "niacinamide peau grasse"
        ]
        
        for query in test_queries:
            print(f"\n   Test: '{query}'")
            context = rag_service.get_context_for_ai(query)
            if context:
                print(f"   ‚úÖ Contexte g√©n√©r√© ({len(context)} caract√®res)")
                print(f"   üìù Aper√ßu: {context[:100]}...")
            else:
                print("   ‚ùå Aucun contexte g√©n√©r√©")
        
        print("\nüéâ Configuration du RAG termin√©e avec succ√®s !")
        print("\nüìã Prochaines √©tapes :")
        print("   1. Testez l'Assistant Beaut√© avec des questions")
        print("   2. Ajoutez plus de donn√©es selon vos besoins")
        print("   3. Int√©grez le RAG dans les routines si souhait√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration : {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
