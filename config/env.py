"""
Configuration des variables d'environnement pour BeautyScan.

Ce module centralise la gestion des variables d'environnement
et fournit des valeurs par d√©faut s√©curis√©es pour le d√©veloppement.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# R√©pertoire racine du projet
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent

# Charger les variables d'environnement depuis le fichier .env
load_dotenv('.env')

def get_env_var(key, default=None, required=False):
    """
    R√©cup√®re une variable d'environnement avec gestion d'erreur.
    
    Args:
        key (str): Nom de la variable d'environnement
        default: Valeur par d√©faut si la variable n'existe pas
        required (bool): Si True, l√®ve une exception si la variable est manquante
        
    Returns:
        str: Valeur de la variable d'environnement
        
    Raises:
        ValueError: Si la variable est requise mais manquante
    """
    value = os.environ.get(key, default)
    
    if required and value is None:
        raise ValueError(f"Variable d'environnement requise manquante: {key}")
    
    return value

# =============================================================================
# CONFIGURATION DJANGO
# =============================================================================

# Cl√© secr√®te Django (CRITIQUE pour la s√©curit√©)
SECRET_KEY = get_env_var('SECRET_KEY', default='')

# Module de param√®tres Django
DJANGO_SETTINGS_MODULE = get_env_var(
    'DJANGO_SETTINGS_MODULE',
    default='config.settings.dev'
)

# Mode debug (d√©sactiv√© en production)
DEBUG = get_env_var('DEBUG', default='True').lower() == 'true'

# =============================================================================
# FLAGS DE D√âVELOPPEMENT
# =============================================================================

# Indicateurs de mode d√©veloppement
DJANGO_DEVELOPMENT = get_env_var('DJANGO_DEVELOPMENT', default='True').lower() == 'true'
IS_DEVELOPMENT = get_env_var('IS_DEVELOPMENT', default='True').lower() == 'true'
LOCAL_DEVELOPMENT = get_env_var('LOCAL_DEVELOPMENT', default='True').lower() == 'true'

# =============================================================================
# CONFIGURATION BASE DE DONN√âES
# =============================================================================

# Configuration SQLite (d√©veloppement)
DB_NAME = get_env_var('DB_NAME', default='db.sqlite3')
DB_USER = get_env_var('DB_USER', default='')
DB_PASSWORD = get_env_var('DB_PASSWORD', default='')
DB_HOST = get_env_var('DB_HOST', default='localhost')
DB_PORT = get_env_var('DB_PORT', default='5432')

# =============================================================================
# APIS EXTERNES
# =============================================================================

# Azure OpenAI (optionnel - pour les fonctionnalit√©s IA)
AZURE_OPENAI_KEY = get_env_var('AZURE_OPENAI_API_KEY', default=get_env_var('OPENAI_API_KEY', default=''))
AZURE_OPENAI_ENDPOINT = get_env_var('AZURE_OPENAI_ENDPOINT', default='')

# Ollama (mod√®le IA local)
OLLAMA_API_URL = get_env_var('OLLAMA_API_URL', default='http://localhost:11434')

# Stripe (paiements)
STRIPE_PUBLISHABLE_KEY = get_env_var('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = get_env_var('STRIPE_SECRET_KEY', default='')

# =============================================================================
# CONFIGURATION EMAIL
# =============================================================================

# Configuration SMTP (production)
EMAIL_HOST = get_env_var('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = get_env_var('EMAIL_PORT', default='587')
EMAIL_HOST_USER = get_env_var('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = get_env_var('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = get_env_var('EMAIL_USE_TLS', default='True').lower() == 'true'

# =============================================================================
# CONFIGURATION PRODUCTION
# =============================================================================

# H√¥tes autoris√©s pour la production
ALLOWED_HOSTS_STR = get_env_var('ALLOWED_HOSTS', default='localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STR.split(',') if host.strip()]

# Utilisateurs d√©veloppeurs autoris√©s (mode Premium dev)
AUTHORIZED_DEV_USERS_STR = get_env_var('AUTHORIZED_DEV_USERS', default='admin,testuser')
AUTHORIZED_DEV_USERS = [user.strip() for user in AUTHORIZED_DEV_USERS_STR.split(',') if user.strip()]

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def is_development_mode():
    """
    V√©rifie si l'application est en mode d√©veloppement.
    
    Returns:
        bool: True si en mode d√©veloppement
    """
    return any([
        DJANGO_DEVELOPMENT,
        IS_DEVELOPMENT,
        LOCAL_DEVELOPMENT,
        DEBUG
    ])

def is_production_mode():
    """
    V√©rifie si l'application est en mode production.
    
    Returns:
        bool: True si en mode production
    """
    return not is_development_mode()

def get_database_config():
    """
    Retourne la configuration de base de donn√©es appropri√©e.
    
    Returns:
        dict: Configuration de base de donn√©es
    """
    if is_development_mode():
        # SQLite pour le d√©veloppement
        return {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': PROJECT_ROOT / DB_NAME,
        }
    else:
        # PostgreSQL pour la production
        return {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }

def validate_environment():
    """
    Valide la configuration de l'environnement.
    
    V√©rifie que toutes les variables requises sont pr√©sentes
    et que la configuration est coh√©rente.
    
    Raises:
        ValueError: Si la configuration est invalide
    """
    errors = []
    
    # V√©rifications de s√©curit√©
    if is_production_mode():
        if not SECRET_KEY:
            errors.append("SECRET_KEY doit √™tre configur√©e en production")
        
        if DEBUG:
            errors.append("DEBUG doit √™tre False en production")
    
    # V√©rifications de base de donn√©es
    if is_production_mode():
        if not DB_NAME or DB_NAME == 'db.sqlite3':
            errors.append("DB_NAME doit √™tre configur√© pour la production")
        
        if not DB_USER:
            errors.append("DB_USER doit √™tre configur√© pour la production")
    
    # V√©rifications d'API (optionnelles mais recommand√©es)
    if not AZURE_OPENAI_KEY and not OLLAMA_API_URL:
        print("‚ö†Ô∏è  Aucune API IA configur√©e - certaines fonctionnalit√©s seront limit√©es")
    
    if not STRIPE_SECRET_KEY:
        print("‚ö†Ô∏è  Stripe non configur√© - les paiements ne fonctionneront pas")
    
    if errors:
        raise ValueError("Erreurs de configuration:\n" + "\n".join(f"- {error}" for error in errors))

def print_environment_info():
    """
    Affiche les informations de configuration de l'environnement.
    
    Utile pour le d√©bogage et la v√©rification de la configuration.
    """
    print("üîß Configuration de l'environnement BeautyScan:")
    print(f"   Mode: {'üü¢ D√©veloppement' if is_development_mode() else 'üî¥ Production'}")
    print(f"   Debug: {'‚úÖ Activ√©' if DEBUG else '‚ùå D√©sactiv√©'}")
    print(f"   Base de donn√©es: {get_database_config()['ENGINE']}")
    print(f"   Utilisateurs autoris√©s: {', '.join(AUTHORIZED_DEV_USERS)}")
    
    if AZURE_OPENAI_KEY:
        print("   Azure OpenAI: ‚úÖ Configur√©")
    elif OLLAMA_API_URL:
        print("   Ollama: ‚úÖ Configur√©")
    else:
        print("   IA: ‚ö†Ô∏è  Non configur√©")
    
    if STRIPE_SECRET_KEY:
        print("   Stripe: ‚úÖ Configur√©")
    else:
        print("   Stripe: ‚ö†Ô∏è  Non configur√©")

# Validation automatique au chargement du module
if __name__ == "__main__":
    try:
        validate_environment()
        print_environment_info()
        print("‚úÖ Configuration valide")
    except ValueError as e:
        print(f"‚ùå Configuration invalide: {e}")
        sys.exit(1)
